/**
 * Shared Gradle build configure for all of the subprojects (Java/Scala).
 *
 * settings.gradle
 * ---------------
 * Your subproject name and folder will be added in its `include` directive.
 *
 * @author Tim Lauv
 * @created 2017.08.01
 * 
 */

apply plugin: 'idea' // for adding root project as IDEA Project
idea {
    // for .iml metadata generated for root IDEA Module to hide IDE default build output
    // (this is only useful if you still clicks - Build Module - in right-click context menu)
    module {
        inheritOutputDirs = false
        outputDir = file('.gradle/production')
        testOutputDir = file('.gradle/test')
    }
}

/* === sub project layout and build configure === */

subprojects {

    buildDir = 'generated' // [Caveat: kotlin plugin seems to pick the old buildDir upon applying]

    apply plugin: 'idea' // for adding included (settings.gradle) subprojects as IDEA Modules
    idea {
        // for *.iml metadata generated for any IDEA Module to use bnd project layout.
        // (this is only useful if you still clicks - Build Module - in right-click context menu)
        module {
            inheritOutputDirs = false
            outputDir = file('bin')
            testOutputDir = file('bin_test')
        }
    }

    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'kotlin'

    repositories {
        jcenter()
    }

    task instrument(type: Copy) {
        from(file('generated/classes/kotlin/main'))
        into('bin')
    }

    compileKotlin.doLast {
        tasks.instrument.execute()
    }

    /* === global dependencies for sub project === */
    //subprojects don't really need to specify their own deps.
    dependencies {
        //scala std lib (if you use Scala in sub project)
        compile "org.scala-lang:scala-library:$scala_version"
        //kotlin std lib (if you use Kotlin in sub project)
        compile "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlin_version"

        //osgi services API and framework constants (to compile against, https://mvnrepository.com/artifact/org.osgi)
        compile 'org.osgi:org.osgi.framework:1.8.0'
        compile 'org.osgi:org.osgi.service.component:1.3.0'
        compile 'org.osgi:org.osgi.service.component.annotations:1.3.0'
        compile 'org.osgi:org.osgi.service.http.whiteboard:1.0.0'

        //javax specs
        compile 'javax.servlet:javax.servlet-api:3.1.0'

        //libs and frameworks
        compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.25.1'

        //test runners
        testCompile 'junit:junit:4.12'
        testCompile "org.scalatest:scalatest_${scala_version.split('\\.')[0..<2].join('.')}:3.0.3"
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/java']
            }
            scala {
                srcDirs = ['src/scala']
            }
            kotlin {
                srcDirs = ['src/kotlin']
            }
            resources {
                srcDirs = ['src/resources']
            }
            output.classesDir = 'bin'
                
        }
        test {
            java {
                srcDirs = ['test/java']
            }
            scala {
                srcDirs = ['test/scala']
            }
            kotlin {
                srcDirs = ['test/kotlin']
            }
            resources {
                srcDirs = ['test/resources']
            }
            output.classesDir = 'bin_test'
        }
    }

    //use bnd tool instead for packing the jar step
    task bndJar(type: Exec, dependsOn: classes) {
        commandLine '../../tools/bnd/bundle.sh', "${project.name}"
    }
    jar.enabled = false
    assemble.dependsOn bndJar

}

/* === additional helper tasks === */

task homeForIDE {
    doLast {
        println "Your local Gradle home is at [${gradle.gradleHomeDir}]" 
    }
}

task wrapper(type: Wrapper) {
    description '[OSGi-StarterKit] Generate a wrapper for other developers to use tasks without gradle installed. (./gradlew)'
    gradleVersion = '4.0.2'
    jarFile = file("${project.projectDir}/tools/gradle/wrapper/gradle-wrapper.jar")
}

task regenModuleLibs(dependsOn: subprojects.findAll { p -> true }.ideaModule) {
    description '[OSGi-StarterKit] Regenerate *.iml to reflect dependencies {} change in subprojects as IDEA Modules'
}

task clearLibs(type: Delete, dependsOn: regenModuleLibs) {
    description '[OSGi-StarterKit] Delete locally sync-ed dependencies folder ./subprojects/cnf/libs'
    delete "${project.projectDir}/subprojects/cnf/libs"
}

//sync dependency jars into ./subprojects/cnf/libs so we can pick them into runtime later if needed.
task syncLibs(type: Copy, dependsOn: clearLibs) {
    description '[OSGi-StarterKit] Synchronize dependencies for subprojects (regen *.iml, clear and copy *.jar)'
    from subprojects.configurations.compile // requires plugin: 'java'
    into "${project.projectDir}/subprojects/cnf/libs"
}

/* === root build script config and deps === */
//use `gradle -q <proj:>properties` to check
buildscript {
    ext.scala_version = '2.12.3'
    ext.kotlin_version = '1.2.21'

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

    buildDir = '.gradle'
}
